#!/usr/bin/env python3

import argparse
from datetime import datetime
import os
import subprocess
import sys
import shutil


def parse_args():
    parser = argparse.ArgumentParser(description='Gathers information about host and stellar-core')
    parser.add_argument('-d', '--dest', required=False, type=str, help='Pre-existing path to use for storing results',
                        default='/var/lib/stellar/')
    parser.add_argument('-c', '--core-config', required=False, type=str, help='Path to the stellar-core config file',
                        default='/etc/stellar/stellar-core.cfg')
    return parser.parse_args()


class Gatherer(object):
    def catch_errors(func):
        def wrapper(self):
            try:
                func(self)
                return True
            except:
                print('Error calling function {}'.format(func.__name__))
                return False
        return wrapper

    def __init__(self, args):
        timestamp = datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
        self.base_dir = args.dest
        self.scratch_dir = os.path.join(args.dest, '{}-{}'.format('stellar-core-debug-info', timestamp))
        self.tgz_file = '{}.tar.gz'.format(self.scratch_dir)
        self.core_config = args.core_config

    def pre_flight(self):
        if not os.path.isdir(self.scratch_dir):
            print('Creating scratch directory: {}'.format(self.scratch_dir))
            try:
                os.mkdir(self.scratch_dir, mode=0o755)
            except:
                print('Failed to create directory')
                return False
        if not os.access(self.scratch_dir, os.W_OK):
            print('Error: directory is not writable: {}'.format(self.scratch_dir))
            return False

        for d in [os.path.join(self.scratch_dir, i) for i in ['os-info', 'core', 'logs', 'offline-info']]:
            if not os.path.isdir(d):
                os.mkdir(d, mode=0o755)

    def collect(self):
        if not all([self.pre_flight(),
                    self.gather_os_info(),
                    self.gather_core_info(),
                    self.gather_offline_info(),
                    self.create_archive(),
                    ]):
            return False
        else:
            return True

    @catch_errors
    def gather_os_info(self):
        print('Gathering OS information...')
        shutil.copy('/etc/os-release', os.path.join(self.scratch_dir, 'os-info'))
        with open(os.path.join(self.scratch_dir, 'os-info', 'disk-info'), 'w') as f:
            f.write('#####################\n# df -h\n#####################\n')
            f.write(subprocess.check_output(['df', '-h']).decode('utf-8'))
            f.write('#####################\n# lsblk\n#####################\n')
            f.write(subprocess.check_output(['lsblk']).decode('utf-8'))

    @catch_errors
    def gather_core_info(self):
        print('Gathering stellar-core version and config...')
        with open(os.path.join(self.scratch_dir, 'core', 'version'), 'w') as f:
            f.write('#####################\n# stellar-core version\n#####################\n')
            f.write(subprocess.check_output(['stellar-core', 'version']).decode('utf-8'))

        with open(self.core_config, 'r') as f:
            raw_config = f.read()
        # TODO: redact secrets from config and store in self.scratch_dir/core/stellar-core.cfg

    @catch_errors
    def gather_offline_info(self):
        print('Gathering stellar-core offline-info...')
        with open(os.path.join(self.scratch_dir, 'offline-info', 'output'), 'w') as f:
            f.write('#####################\n# stellar-core --conf {} offline-info\n#####################\n'.format(
                    self.core_config))
            f.write(subprocess.check_output(['stellar-core', '--conf', self.core_config, 'offline-info'],
                    cwd=os.path.join(self.scratch_dir, 'offline-info')).decode('utf-8'))

    def create_archive(self):
        cmd = ['tar', '-C', self.base_dir, '-czf', self.tgz_file, os.path.basename(self.scratch_dir)]
        print(" ".join(cmd))
        subprocess.check_call(cmd)
        shutil.rmtree(self.scratch_dir)


def main():
    args = parse_args()
    gatherer = Gatherer(args)
    if gatherer.collect():
        print("Script run successfully")
    else:
        print("Encountered some errors when gathering data")
        sys.exit(1)


if __name__ == '__main__':
    main()
